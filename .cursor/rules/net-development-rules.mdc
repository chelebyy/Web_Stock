---
description: 
globs: 
alwaysApply: true
---
---
   description: Unified ASP.NET Core Development Rules and Best Practices
   globs: **/*.{cs}
   alwaysApply: true
---

# Unified ASP.NET Core Development Rules and Best Practices

You are a senior .NET backend developer and an expert in C#, ASP.NET Core, and Entity Framework Core. This document provides a comprehensive set of guidelines and best practices for developing high-quality, maintainable ASP.NET Core applications.

## Table of Contents
1. [Introduction and Overview](mdc:#introduction-and-overview)
2. [Project Structure and Organization](mdc:#project-structure-and-organization)
3. [Code Style and Coding Standards](mdc:#code-style-and-coding-standards)
4. [Common Patterns and Anti-patterns](mdc:#common-patterns-and-anti-patterns)
5. [Performance Considerations](mdc:#performance-considerations)
6. [Security Best Practices](mdc:#security-best-practices)
7. [Testing Approaches](mdc:#testing-approaches)
8. [Common Pitfalls and Gotchas](mdc:#common-pitfalls-and-gotchas)
9. [Tooling and Environment](mdc:#tooling-and-environment)

## Introduction and Overview

### Core Principles
- Write concise, idiomatic C# code with accurate examples
- Follow .NET and ASP.NET Core conventions and best practices
- Use object-oriented and functional programming patterns as appropriate
- Prefer LINQ and lambda expressions for collection operations
- Structure code according to Clean Architecture principles
- Follow SOLID principles and proper separation of concerns

### Technology Stack
- **.NET Core**: Version 8+
- **ORM**: Entity Framework Core
- **Database**: PostgreSQL
- **Frontend**: Angular with PrimeNG
- **API Documentation**: Swagger/OpenAPI

## Project Structure and Organization

### Recommended Solution Structure
Our project follows a Clean Architecture approach with the following structure:

```
Solution
├── src/
│   ├── Stock.Domain/              # Domain Layer
│   │   ├── Entities/             # Domain entities
│   │   ├── Interfaces/           # Repository interfaces
│   │   ├── Events/               # Domain events
│   │   ├── Exceptions/           # Domain exceptions
│   │   └── Specifications/       # Query specifications
│   │
│   ├── Stock.Application/         # Application Layer
│   │   ├── Common/               # Shared components
│   │   ├── Features/             # Use cases
│   │   │   ├── Auth/            # Authentication
│   │   │   ├── Users/           # User management
│   │   │   └── Roles/           # Role management
│   │   ├── Interfaces/          # Service interfaces
│   │   ├── Models/              # DTOs
│   │   └── Services/            # Application services
│   │
│   ├── Stock.Infrastructure/      # Infrastructure Layer
│   │   ├── Data/                # Data access
│   │   │   ├── Config/         # EF configurations
│   │   │   ├── Migrations/     # EF migrations
│   │   │   └── Repositories/   # Repository implementations
│   │   ├── Identity/           # Authentication
│   │   ├── Logging/            # Logging implementations
│   │   └── Services/           # External services
│   │
│   └── Stock.API/                # API Layer
│       ├── Controllers/         # API endpoints
│       ├── Filters/             # Action filters
│       ├── Middleware/          # Custom middleware
│       └── Extensions/          # Service extensions
│
├── tests/                        # Test Projects
│   ├── Stock.UnitTests/         # Unit tests
│   ├── Stock.IntegrationTests/  # Integration tests
│   └── Stock.FunctionalTests/   # E2E tests
```

### File Naming Conventions
- **Classes**: PascalCase (e.g., `UserController`, `ProductService`)
- **Interfaces**: IPascalCase (e.g., `IProductService`, `IUserRepository`)
- **Methods**: PascalCase (e.g., `GetProduct`, `CreateUser`)
- **Variables (local)**: camelCase (e.g., `productName`, `userId`)
- **Parameters**: camelCase (e.g., `productId`, `userName`)
- **Constants**: PascalCase or UPPERCASE (e.g., `DefaultPageSize`, `MAX_RETRIES`)
- **Enums**: PascalCase (e.g., `OrderStatus`, `UserRole`)
- **Files**: Match the class/interface name (e.g., `UserController.cs`, `IProductService.cs`)

### Module Organization
- **Feature-based Modules**: Group related functionality into modules based on features
- **Vertical Slices**: For complex features, organize modules around specific use cases
- **Separation of Concerns**: Maintain clear separation between presentation, business logic, and data access

## Code Style and Coding Standards

### C# and .NET Usage
- Use C# 10+ features when appropriate (e.g., record types, pattern matching, null-coalescing assignment)
- Leverage built-in ASP.NET Core features and middleware
- Use Entity Framework Core effectively for database operations
- Use asynchronous programming with async/await for I/O-bound operations
- Prefer the latest .NET patterns and practices

### Formatting and Syntax
- Use 'var' for implicit typing when the type is obvious
- Use string interpolation instead of string concatenation
- Use null-conditional operators (?.) and null-coalescing operators (??) to handle null values
- Use expression-bodied members for short, simple methods
- Use proper XML documentation for public APIs

```csharp
// Good
public async Task<User> GetUserByIdAsync(int id)
{
    var user = await _userRepository.GetByIdAsync(id);
    return user ?? throw new NotFoundException($"User with ID {id} not found");
}

// Bad
public User GetUserById(int id)
{
    User user = _userRepository.GetById(id);
    if (user == null)
    {
        throw new NotFoundException("User with ID " + id + " not found");
    }
    return user;
}
```

### Code Organization Within Files
- Keep methods short (generally < 30 lines)
- Group related members together
- Place private fields at the top of the class
- Follow a consistent order: fields, constructors, properties, methods
- Use regions sparingly, if at all

### Error Handling and Validation
- Use exceptions for exceptional cases, not for control flow
- Implement proper error logging using built-in .NET logging or a third-party logger
- Use Data Annotations or Fluent Validation for model validation
- Implement global exception handling middleware
- Return appropriate HTTP status codes and consistent error responses

```csharp
// Global Exception Handling Example
public class ExceptionHandlingMiddleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<ExceptionHandlingMiddleware> _logger;

    public ExceptionHandlingMiddleware(RequestDelegate next, ILogger<ExceptionHandlingMiddleware> logger)
    {
        _next = next;
        _logger = logger;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        try
        {
            await _next(context);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unhandled exception occurred");
            await HandleExceptionAsync(context, ex);
        }
    }

    private static async Task HandleExceptionAsync(HttpContext context, Exception exception)
    {
        context.Response.ContentType = "application/json";

        context.Response.StatusCode = exception switch
        {
            NotFoundException => StatusCodes.Status404NotFound,
            ValidationException => StatusCodes.Status400BadRequest,
            UnauthorizedAccessException => StatusCodes.Status401Unauthorized,
            _ => StatusCodes.Status500InternalServerError
        };

        var response = new
        {
            status = context.Response.StatusCode,
            message = exception.Message,
            detail = exception.InnerException?.Message
        };

        await context.Response.WriteAsJsonAsync(response);
    }
}
```

## Common Patterns and Anti-patterns

### Recommended Design Patterns
- **Dependency Injection**: Use the built-in DI container to manage dependencies
- **Repository Pattern**: Abstract data access logic behind repositories
- **Unit of Work Pattern**: Encapsulate multiple operations into a single transaction
- **Mediator Pattern**: Decouple components by routing messages through a mediator
- **CQRS**: Separate read and write operations for complex scenarios
- **Specification Pattern**: Encapsulate query logic in reusable specifications

```csharp
// Repository Pattern Example
public interface IRepository<T> where T : BaseEntity
{
    Task<T> GetByIdAsync(int id);
    Task<IEnumerable<T>> GetAllAsync();
    Task AddAsync(T entity);
    Task UpdateAsync(T entity);
    Task DeleteAsync(T entity);
    IQueryable<T> Query();
}

// Unit of Work Example
public interface IUnitOfWork
{
    IRepository<User> Users { get; }
    IRepository<Product> Products { get; }
    Task<int> SaveChangesAsync();
    Task BeginTransactionAsync();
    Task CommitAsync();
    Task RollbackAsync();
}
```

### Common Anti-patterns to Avoid
- **Tight coupling**: Avoid direct dependencies between components
- **God classes**: Avoid large classes with too many responsibilities
- **Shotgun surgery**: Avoid making changes to multiple classes for a single feature
- **Primitive obsession**: Use value objects for complex domain concepts
- **Feature envy**: Methods should be placed in the class that has the data they need
- **Sync over async**: Avoid blocking async calls with .Wait() or .Result
- **Exposing EF entities directly**: Use DTOs to encapsulate data transfer

### API Design Best Practices
- Follow RESTful API design principles
- Use attribute routing in controllers
- Implement API versioning
- Return appropriate HTTP status codes
- Use consistent response formats
- Document APIs with Swagger/OpenAPI

```csharp
// Controller Example
[ApiController]
[Route("api/[controller]")]
[ApiVersion("1.0")]
public class UsersController : ControllerBase
{
    private readonly IMediator _mediator;

    public UsersController(IMediator mediator)
    {
        _mediator = mediator;
    }

    [HttpGet("{id}")]
    [ProducesResponseType(typeof(UserDto), StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    public async Task<ActionResult<UserDto>> GetById(int id)
    {
        var query = new GetUserByIdQuery(id);
        var result = await _mediator.Send(query);
        return Ok(result);
    }

    [HttpPost]
    [ProducesResponseType(typeof(UserDto), StatusCodes.Status201Created)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    public async Task<ActionResult<UserDto>> Create(CreateUserCommand command)
    {
        var result = await _mediator.Send(command);
        return CreatedAtAction(nameof(GetById), new { id = result.Id }, result);
    }
}
```

## Performance Considerations

### Database Performance
- Use asynchronous operations for database access
- Implement proper indexing on database tables
- Optimize LINQ queries to prevent N+1 query problems
- Use Include statements judiciously to avoid over-fetching
- Use pagination for large data sets
- Consider using stored procedures for complex operations

```csharp
// Pagination Example
public async Task<PagedResult<ProductDto>> GetProductsAsync(int page, int pageSize)
{
    var query = _context.Products
        .AsNoTracking()
        .Where(p => p.IsActive)
        .OrderBy(p => p.Name);
        
    var totalCount = await query.CountAsync();
    var items = await query
        .Skip((page - 1) * pageSize)
        .Take(pageSize)
        .Select(p => new ProductDto
        {
            Id = p.Id,
            Name = p.Name,
            Price = p.Price,
            // Map other properties
        })
        .ToListAsync();
        
    return new PagedResult<ProductDto>
    {
        Items = items,
        TotalCount = totalCount,
        Page = page,
        PageSize = pageSize
    };
}
```

### Caching Strategies
- Use memory caching for frequently accessed, relatively static data
- Implement distributed caching for web farm scenarios
- Use response caching for GET and HEAD requests
- Implement cache invalidation strategies
- Use cache tags to group related cache entries

```csharp
// Memory Cache Example
public async Task<ProductDto> GetProductByIdAsync(int id)
{
    string cacheKey = $"product-{id}";
    
    if (!_memoryCache.TryGetValue(cacheKey, out ProductDto product))
    {
        product = await _productRepository.GetByIdAsync(id);
        
        var cacheOptions = new MemoryCacheEntryOptions()
            .SetAbsoluteExpiration(TimeSpan.FromMinutes(10))
            .SetPriority(CacheItemPriority.Normal);
            
        _memoryCache.Set(cacheKey, product, cacheOptions);
    }
    
    return product;
}
```

### Memory Management
- Minimize object allocations, especially in hot code paths
- Use object pooling for frequently created/destroyed objects
- Properly dispose of IDisposable resources
- Be mindful of closure captures in lambdas
- Use structs for small, short-lived value types

### Asynchronous Programming
- Use async/await for I/O-bound operations
- Avoid blocking calls in async methods
- Use Task.WhenAll for parallel operations
- Implement proper cancellation token support
- Be careful with async void methods (only use for event handlers)

```csharp
// Proper Async Pattern
public async Task<IEnumerable<ProductDto>> GetProductsByIdsAsync(
    IEnumerable<int> ids, 
    CancellationToken cancellationToken = default)
{
    var tasks = ids.Select(id => _productRepository.GetByIdAsync(id, cancellationToken));
    var products = await Task.WhenAll(tasks);
    return products.Where(p => p != null).Select(_mapper.Map<ProductDto>);
}
```

## Security Best Practices

### Authentication and Authorization
- Use ASP.NET Core Identity for authentication
- Implement JWT or cookie-based authentication as appropriate
- Use policy-based authorization
- Implement role-based access control (RBAC)
- Consider using Identity Server for complex scenarios
- Implement proper password policies

```csharp
// JWT Authentication Configuration
public static class AuthExtensions
{
    public static IServiceCollection AddJwtAuthentication(
        this IServiceCollection services, 
        IConfiguration configuration)
    {
        var jwtSettings = configuration.GetSection("JwtSettings");
        var secretKey = Encoding.UTF8.GetBytes(jwtSettings["SecretKey"]);
        
        services.AddAuthentication(options =>
        {
            options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
        })
        .AddJwtBearer(options =>
        {
            options.TokenValidationParameters = new TokenValidationParameters
            {
                ValidateIssuer = true,
                ValidateAudience = true,
                ValidateLifetime = true,
                ValidateIssuerSigningKey = true,
                ValidIssuer = jwtSettings["Issuer"],
                ValidAudience = jwtSettings["Audience"],
                IssuerSigningKey = new SymmetricSecurityKey(secretKey)
            };
        });
        
        return services;
    }
}
```

### Data Protection
- Encrypt sensitive data at rest and in transit
- Use HTTPS for all communications
- Use the ASP.NET Core Data Protection API
- Implement proper key management
- Sanitize user input to prevent injection attacks
- Use parameterized queries to prevent SQL injection

### OWASP Top 10 Mitigations
- **Injection**: Use parameterized queries, ORM, and input validation
- **Broken Authentication**: Implement secure authentication mechanisms
- **Sensitive Data Exposure**: Encrypt sensitive data and use HTTPS
- **XML External Entities (XXE)**: Use safe XML parsing
- **Broken Access Control**: Implement proper authorization checks
- **Security Misconfiguration**: Follow security best practices
- **Cross-Site Scripting (XSS)**: Sanitize user input and output
- **Insecure Deserialization**: Use secure deserialization practices
- **Using Components with Known Vulnerabilities**: Keep dependencies updated
- **Insufficient Logging & Monitoring**: Implement comprehensive logging

## Testing Approaches

### Unit Testing
- Use xUnit, NUnit, or MSTest for unit tests
- Follow the Arrange-Act-Assert pattern
- Use mocking frameworks (Moq, NSubstitute) to isolate dependencies
- Test business logic thoroughly
- Aim for high code coverage

```csharp
// Unit Test Example (xUnit)
public class UserServiceTests
{
    private readonly Mock<IUserRepository> _userRepositoryMock;
    private readonly UserService _userService;
    
    public UserServiceTests()
    {
        _userRepositoryMock = new Mock<IUserRepository>();
        _userService = new UserService(_userRepositoryMock.Object);
    }
    
    [Fact]
    public async Task GetByIdAsync_UserExists_ReturnsUser()
    {
        // Arrange
        var userId = 1;
        var user = new User { Id = userId, Name = "Test User" };
        _userRepositoryMock.Setup(repo => repo.GetByIdAsync(userId))
            .ReturnsAsync(user);
            
        // Act
        var result = await _userService.GetByIdAsync(userId);
        
        // Assert
        Assert.NotNull(result);
        Assert.Equal(userId, result.Id);
        Assert.Equal("Test User", result.Name);
    }
    
    [Fact]
    public async Task GetByIdAsync_UserDoesNotExist_ThrowsNotFoundException()
    {
        // Arrange
        var userId = 1;
        _userRepositoryMock.Setup(repo => repo.GetByIdAsync(userId))
            .ReturnsAsync((User)null);
            
        // Act & Assert
        await Assert.ThrowsAsync<NotFoundException>(
            () => _userService.GetByIdAsync(userId));
    }
}
```

### Integration Testing
- Test the interaction between components
- Use a test database or in-memory database
- Test API endpoints with HttpClient
- Test database operations with actual database
- Use WebApplicationFactory for testing the entire HTTP pipeline

```csharp
// Integration Test Example
public class UsersControllerIntegrationTests : IClassFixture<WebApplicationFactory<Program>>
{
    private readonly WebApplicationFactory<Program> _factory;
    private readonly HttpClient _client;
    
    public UsersControllerIntegrationTests(WebApplicationFactory<Program> factory)
    {
        _factory = factory.WithWebHostBuilder(builder =>
        {
            builder.ConfigureServices(services =>
            {
                // Replace services with test implementations
                var descriptor = services.SingleOrDefault(
                    d => d.ServiceType == typeof(DbContextOptions<ApplicationDbContext>));
                    
                if (descriptor != null)
                {
                    services.Remove(descriptor);
                }
                
                services.AddDbContext<ApplicationDbContext>(options =>
                {
                    options.UseInMemoryDatabase("TestDb");
                });
                
                // Seed test data
                var sp = services.BuildServiceProvider();
                using var scope = sp.CreateScope();
                var scopedServices = scope.ServiceProvider;
                var db = scopedServices.GetRequiredService<ApplicationDbContext>();
                
                db.Database.EnsureCreated();
                
                // Add test data
                db.Users.Add(new User { Id = 1, Name = "Test User" });
                db.SaveChanges();
            });
        });
        
        _client = _factory.CreateClient();
    }
    
    [Fact]
    public async Task GetById_ReturnsUser_WhenUserExists()
    {
        // Arrange
        var userId = 1;
        
        // Act
        var response = await _client.GetAsync($"/api/users/{userId}");
        
        // Assert
        response.EnsureSuccessStatusCode();
        var content = await response.Content.ReadAsStringAsync();
        var user = JsonSerializer.Deserialize<UserDto>(content, new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        });
        
        Assert.NotNull(user);
        Assert.Equal(userId, user.Id);
        Assert.Equal("Test User", user.Name);
    }
}
```

### Test Organization
- Organize tests by feature or component
- Use test fixtures to share setup code
- Follow consistent naming conventions
- Separate unit, integration, and functional tests

## Common Pitfalls and Gotchas

### Frequent Mistakes
- Not handling exceptions properly
- Blocking async code with .Result or .Wait()
- Not disposing of IDisposable resources
- Exposing EF Core entities directly in APIs
- Using Entity Framework incorrectly (e.g., tracking when not needed)
- Not handling concurrency issues
- Ignoring security best practices

### Best Practices to Avoid Common Issues
- Use async/await consistently throughout the codebase
- Always dispose of IDisposable resources using `using` statements
- Use DTOs to encapsulate data transfer
- Use AsNoTracking() for read-only queries
- Implement proper error handling
- Keep dependencies updated
- Follow security best practices

```csharp
// Common Pitfall: Not handling IDisposable resources properly
// Bad
public void ProcessFile(string filePath)
{
    var stream = File.OpenRead(filePath); // No disposal
    // Process the stream
}

// Good
public void ProcessFile(string filePath)
{
    using var stream = File.OpenRead(filePath);
    // Process the stream
    // Stream is automatically disposed when this method exits
}
```

## Tooling and Environment

### Recommended Development Tools
- **IDE**: Visual Studio 2022 or Visual Studio Code with C# extensions
- **ORM**: Entity Framework Core
- **Testing Frameworks**: xUnit, NUnit, or MSTest
- **Mocking Frameworks**: Moq or NSubstitute
- **API Documentation**: Swagger/OpenAPI
- **Logging**: Serilog or NLog
- **Code Analysis**: SonarQube, StyleCop, or ReSharper

### Build and Deployment
- Use CI/CD pipelines (Azure DevOps, GitHub Actions)
- Implement automated testing in the build pipeline
- Use different environments (Development, Testing, Production)
- Implement infrastructure as code
- Use containerization (Docker) for consistency across environments

### Monitoring and Logging
- Implement comprehensive logging
- Use structured logging
- Monitor application health with health checks
- Implement application insights or similar APM tools
- Log all exceptions and important operations

```csharp
// Serilog Configuration Example
public static IHostBuilder CreateHostBuilder(string[] args) =>
    Host.CreateDefaultBuilder(args)
        .UseSerilog((context, loggerConfiguration) =>
        {
            loggerConfiguration
                .ReadFrom.Configuration(context.Configuration)
                .Enrich.FromLogContext()
                .Enrich.WithMachineName()
                .Enrich.WithProcessId()
                .Enrich.WithThreadId()
                .WriteTo.Console()
                .WriteTo.File("logs/log-.txt", rollingInterval: RollingInterval.Day)
                .WriteTo.PostgreSQL(
                    connectionString: context.Configuration.GetConnectionString("DefaultConnection"),
                    tableName: "Logs",
                    needAutoCreateTable: true);
        })
        .ConfigureWebHostDefaults(webBuilder =>
        {
            webBuilder.UseStartup<Startup>();
        });
```

---

This document combines best practices from multiple sources and should serve as a comprehensive guide for ASP.NET Core development in our project. It should be regularly updated as new practices emerge and as the team identifies additional patterns that work well in our specific context. 