---
description: project
globs: 
---
# Project Rules

## Basic Operating Principles

1. **Receiving and Understanding Instructions**
   - Carefully interpret user instructions.
   - Ask specific questions when clarification is needed.
   - Clearly understand technical constraints and requirements.

2. **Deep Analysis and Planning**
   - Task Analysis: The ultimate goal of the task.
   - Technical Requirements: Technology stack and constraints.
   - Implementation Steps: Specific steps.
   - Risks: Potential issues.
   - Quality Standards: Standards to be met.

3. **Developing an Implementation Plan**
   - Specific steps and expected challenges.

4. **Incremental Implementation and Verification**
   - Verification after each step is completed.
   - Immediate response to issues.
   - Comparison with quality standards.

5. **Continuous Feedback**
   - Regular reporting of implementation progress.
   - Approval at critical decision points.
   - Rapid reporting of issues.

## Technology Stack and Constraints

- **Core Technologies**: .NET Core 8, PostgreSQL 17.3, Angular 19.1.2, PrimeNG 19.0.6,Tailwind CSS 3.4.1.
- **Development Tools**: npm, ESLint.

## Project Structure

```
project-root/
├── backend/
│   ├── controllers/          # API Controllers
│   ├── models/               # Database Models
│   ├── services/             # Business Logic
│   └── config/               # Configuration Files
├── frontend/
│   ├── src/                  # Angular Source Files
│   ├── assets/               # Static Assets
│   └── styles/               # Global Styles
```

## Quality Management Protocol

1. **Code Quality**
   - Strict TypeScript type checking.
   - Full compliance with ESLint rules.
   - Maintain code consistency.

2. **Performance**
   - Efficient data fetching.
   - Package size optimization.

3. **Security**
   - Strict validation of input values.
   - Proper error management.
   - Secure management of sensitive information.

4. **UI/UX**
   - Ensure responsive design.
   - Compliance with accessibility standards.
   - Maintain a consistent design system.

## Implementation Process

1. **Initial Analysis Phase**
   - Definition of functional requirements.
   - Verification of technical constraints.
   - Verification of compatibility with existing code.

2. **Implementation Phase**
   - Incremental implementation.
   - Verification at each stage.
   - Maintain code quality.

3. **Verification Phase**
   - Unit testing.
   - Integration testing.
   - Performance testing.

4. **Final Approval**
   - Consistency with requirements.
   - Code quality.
   - Completeness of documentation.

## Error Management Protocol

1. **Problem Identification**
   - Analysis of error messages.
   - Definition of impact scope.
   - Root cause analysis.

2. **Solution Development**
   - Evaluation of multiple response options.
   - Risk assessment.
   - Selection of the most appropriate solution.

3. **Implementation and Verification**
   - Solution implementation.
   - Test verification.
   - Verification of side effects.

4. **Documentation**
   - Recording of problems and solutions.
   - Suggestion of preventive measures.
   - Sharing of learning points.

## SOLID Principles

1. **Single Responsibility Principle (SRP)**
   - Each class should have only one responsibility.

2. **Open/Closed Principle (OCP)**
   - Software entities should be open for extension but closed for modification.

3. **Liskov Substitution Principle (LSP)**
   - Derived classes should be substitutable for their base classes.

4. **Interface Segregation Principle (ISP)**
   - Clients should not be forced to depend on interfaces they do not use.

5. **Dependency Inversion Principle (DIP)**
   - High-level modules should not depend on low-level modules. Both should depend on abstractions.

## Backend Rules

### Development Environment and Workflow
- All execution, debugging, and testing should be done in Visual Studio Enterprise.
- Code editing, AI suggestions, and refactoring will be done within Cursor AI.
- Assume Visual Studio is installed and will be used to compile and launch the application.

### Code Style and Structure
- Write idiomatic and efficient C# code.
- Adhere to .NET Core and Angular conventions.
- Separate complex business logic into service classes.
- Provide non-blocking operations using async/await throughout the application.

### Naming Conventions
- Use PascalCase for component names, method names, and public members.
- Use camelCase for private fields and local variables.
- Prefix interface names with "I" (e.g., IUserService).

### Error Management and Validation
- Implement proper error management for API calls.
- Use FluentValidation or DataAnnotations for form validation.

### API Design and Integration
- Communicate with external APIs or your own backend using HttpClient or appropriate services.
- Implement error management using try-catch for API calls and provide appropriate feedback in the user interface.

### Security and Authentication
- Implement authentication and authorization using ASP.NET Identity or JWT tokens where necessary.
- Use HTTPS for all web communications and implement appropriate CORS policies.

### API Documentation and Swagger
- Create API documentation using Swagger/OpenAPI for your backend API services.
- Provide XML documentation for models and API methods to enhance Swagger documentation.

## Best Practices for Angular, SASS, and TypeScript

### Core Principles
- **Provide Clear and Precise Examples**: Share Angular and TypeScript examples with clear explanations.
- **Immutability and Pure Functions**: Apply immutability principles and pure functions within services and state management.
- **Component Composition**: Prefer component composition to enhance modularity.
- **Meaningful Naming**: Use descriptive variable names like `isUserLoggedIn`, `userPermissions`, `fetchData()`.
- **File Naming**: Use kebab-case for files (e.g., `user-profile.component.ts`).

### TypeScript and Angular
- **Type Safety with Interfaces**: Define data models with interfaces for explicit types and avoid using `any`.
- **Full Use of TypeScript**: Enhance code reliability by using TypeScript's type system instead of `any`.
- **Code Structure**: Structure files with imports at the top, followed by class definition, properties, methods, and finally exports.
- **Optional Chaining and Nullish Coalescing**: Use optional chaining (`?.`) and nullish coalescing (`??`) to prevent null/undefined errors.
- **Standalone Components**: Use standalone components to increase code reusability without relying on Angular modules.
- **Reactive State Management with Signals**: Use Angular's signal system for efficient and reactive programming.
- **Direct Service Injection**: Inject services directly within component, directive, or service logic using the `inject` function.

### File Structure and Naming
- **Component Files**: `*.component.ts`
- **Service Files**: `*.service.ts`
- **Module Files**: `*.module.ts`
- **Directive Files**: `*.directive.ts`
- **Pipe Files**: `*.pipe.ts`
- **Test Files**: `*.spec.ts`
- **General Naming**: Maintain consistency and predictability by using kebab-case for all file names.

### Coding Standards
- Use single quotes (`'`).
- Indent with 2 spaces.
- Avoid unnecessary whitespace and unused variables.
- Use `const` for constants and immutable variables.
- Use template strings for string interpolation and multi-line strings.

### Angular-Specific Development Guidelines
- Use the `async` pipe for observables in templates.
- Enable lazy loading for feature modules.
- Use semantic HTML and relevant ARIA attributes to ensure accessibility.
- Use Angular's signal system for efficient reactive state management.
- Optimize image loading with `NgOptimizedImage` and prevent broken links in case of errors.
- Implement deferrable views to delay rendering of unnecessary components.

### Import Order
1. Angular core and common modules
2. RxJS modules
3. Angular-specific modules (e.g., `FormsModule`)
4. Core application imports
5. Shared module imports
6. Environment-specific imports (e.g., `environment.ts`)
7. Relative path imports

### Error Management and Validation
- Implement robust error management in services and components, using custom error types or error factories where necessary.
- Implement validation through Angular's form validation system or custom validators.

### Testing and Code Quality
- Follow the Arrange-Act-Assert model for unit tests.
- Ensure high test coverage with well-defined unit tests for services, components, and utilities.

### Performance Optimization
- Use trackBy functions with `ngFor` to optimize list rendering.
- Implement pure pipes to ensure recalculations only occur on input changes.
- Avoid direct DOM manipulation, use Angular's template engine.
- Use Angular's signal system to reduce unnecessary re-renders and optimize state management.
- Use `NgOptimizedImage` for faster, more efficient image loading.

### Security Best Practices
- Prevent XSS by relying on Angular's built-in sanitization system and avoid using `innerHTML`.
- Sanitize dynamic content using Angular's trusted sanitization methods to prevent security vulnerabilities.

### Core Principles
- Facilitate service injections using Angular's dependency injection and the `inject` function.
- Focus on writing reusable, modular code that aligns with Angular's style guide and industry best practices.
- Continuously optimize Core Web Vitals, especially Largest Contentful Paint (LCP), Interaction to Next Paint (INP), and Cumulative Layout Shift (CLS).

### Reference
Refer to Angular's official documentation to maintain best practices and code quality and sustainability for components, services, and modules.




[.cursorrules](mdc:.cursorrules) [scratchpad.md](mdc:scratchpad.md) [Roadmap.md](mdc:Roadmap.md) 
